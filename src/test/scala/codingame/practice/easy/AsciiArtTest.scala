package codingame.practice.easy

import org.scalatest.FlatSpec

class AsciiArtTest extends FlatSpec {

  private val standard =
    " #  ##   ## ##  ### ###  ## # # ###  ## # # #   # # ###  #  ##   #  ##   ## ### # # # # # # # # # # ### ### " ::
    "# # # # #   # # #   #   #   # #  #    # # # #   ### # # # # # # # # # # #    #  # # # # # # # # # #   #   # " ::
    "### ##  #   # # ##  ##  # # ###  #    # ##  #   ### # # # # ##  # # ##   #   #  # # # # ###  #   #   #   ## " ::
    "# # # # #   # # #   #   # # # #  #  # # # # #   # # # # # # #    ## # #   #  #  # # # # ### # #  #  #       " ::
    "# # ##   ## ##  ### #    ## # # ###  #  # # ### # # # #  #  #     # # # ##   #  ###  #  # # # #  #  ###  #  " :: Nil

  private val fancy =

    "| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |" ::
    "| |      __      | || |   ______     | || |     ______   | || |  ________    | || |  _________   | || |  _________   | || |    ______    | || |  ____  ____  | || |     _____    | || |     _____    | || |  ___  ____   | || |   _____      | || | ____    ____ | || | ____  _____  | || |     ____     | || |   ______     | || |    ___       | || |  _______     | || |    _______   | || |  _________   | || | _____  _____ | || | ____   ____  | || | _____  _____ | || |  ____  ____  | || |  ____  ____  | || |   ________   | || |    ______    | |" ::
    "| |     /  \\     | || |  |_   _ \\    | || |   .' ___  |  | || | |_   ___ `.  | || | |_   ___  |  | || | |_   ___  |  | || |  .' ___  |   | || | |_   ||   _| | || |    |_   _|   | || |    |_   _|   | || | |_  ||_  _|  | || |  |_   _|     | || ||_   \\  /   _|| || ||_   \\|_   _| | || |   .'    `.   | || |  |_   __ \\   | || |  .'   '.     | || | |_   __ \\    | || |   /  ___  |  | || | |  _   _  |  | || ||_   _||_   _|| || ||_  _| |_  _| | || ||_   _||_   _|| || | |_  _||_  _| | || | |_  _||_  _| | || |  |  __   _|  | || |   / _ __ `.  | |" ::
    "| |    / /\\ \\    | || |    | |_) |   | || |  / .'   \\_|  | || |   | |   `. \\ | || |   | |_  \\_|  | || |   | |_  \\_|  | || | / .'   \\_|   | || |   | |__| |   | || |      | |     | || |      | |     | || |   | |_/ /    | || |    | |       | || |  |   \\/   |  | || |  |   \\ | |   | || |  /  .--.  \\  | || |    | |__) |  | || | /  .-.  \\    | || |   | |__) |   | || |  |  (__ \\_|  | || | |_/ | | \\_|  | || |  | |    | |  | || |  \\ \\   / /   | || |  | | /\\ | |  | || |   \\ \\  / /   | || |   \\ \\  / /   | || |  |_/  / /    | || |  |_/____) |  | |" ::
    "| |   / ____ \\   | || |    |  __'.   | || |  | |         | || |   | |    | | | || |   |  _|  _   | || |   |  _|      | || | | |    ____  | || |   |  __  |   | || |      | |     | || |   _  | |     | || |   |  __'.    | || |    | |   _   | || |  | |\\  /| |  | || |  | |\\ \\| |   | || |  | |    | |  | || |    |  ___/   | || | | |   | |    | || |   |  __ /    | || |   '.___`-.   | || |     | |      | || |  | '    ' |  | || |   \\ \\ / /    | || |  | |/  \\| |  | || |    > `' <    | || |    \\ \\/ /    | || |     .'.' _   | || |    /  ___.'  | |" ::
    "| | _/ /    \\ \\_ | || |   _| |__) |  | || |  \\ `.___.'\\  | || |  _| |___.' / | || |  _| |___/ |  | || |  _| |_       | || | \\ `.___]  _| | || |  _| |  | |_  | || |     _| |_    | || |  | |_' |     | || |  _| |  \\ \\_  | || |   _| |__/ |  | || | _| |_\\/_| |_ | || | _| |_\\   |_  | || |  \\  `--'  /  | || |   _| |_      | || | \\  `-'  \\_   | || |  _| |  \\ \\_  | || |  |`\\____) |  | || |    _| |_     | || |   \\ `--' /   | || |    \\ ' /     | || |  |   /\\   |  | || |  _/ /'`\\ \\_  | || |    _|  |_    | || |   _/ /__/ |  | || |    |_|       | |" ::
    "| ||____|  |____|| || |  |_______/   | || |   `._____.'  | || | |________.'  | || | |_________|  | || | |_____|      | || |  `._____.'   | || | |____||____| | || |    |_____|   | || |  `.___.'     | || | |____||____| | || |  |________|  | || ||_____||_____|| || ||_____|\\____| | || |   `.____.'   | || |  |_____|     | || |  `.___.\\__|  | || | |____| |___| | || |  |_______.'  | || |   |_____|    | || |    `.__.'    | || |     \\_/      | || |  |__/  \\__|  | || | |____||____| | || |   |______|   | || |  |________|  | || |    (_)       | |" ::
    "| |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |" ::
    "| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |" ::
il

  it must "build a single letter" in {
    assertResult(
      "### \n" +
      "#   \n" +
      "##  \n" +
      "#   \n" +
      "### "
    )(AsciiArt(standard, 4, "E"))
  }

  it must "repeat letters" in {
    assertResult(
      "# #  #  ### # #  #  ### ###  #  ### \n" +
      "### # # # # # # # #  #   #  # # # # \n" +
      "### ### # # ### ###  #   #  ### # # \n" +
      "# # # # # # # # # #  #   #  # # # # \n" +
      "# # # # # # # # # #  #   #  # # # # "
    )(AsciiArt(standard, 4, "MANHATTAN"))
  }

  it must "ignore case" in {
    assertResult(
      "# #  #  ### # #  #  ### ###  #  ### \n" +
      "### # # # # # # # #  #   #  # # # # \n" +
      "### ### # # ### ###  #   #  ### # # \n" +
      "# # # # # # # # # #  #   #  # # # # \n" +
      "# # # # # # # # # #  #   #  # # # # "
    )(AsciiArt(standard, 4, "ManhAtTan"))
  }

  it must "use '?' for non letter characters" in {
    assertResult(
      "# # ### ### # # ### ### ### ### ### \n" +
      "###   # # # # #   #  #   #    # # # \n" +
      "###  ## # # ###  ##  #   #   ## # # \n" +
      "# #     # # # #      #   #      # # \n" +
      "# #  #  # # # #  #   #   #   #  # # "
    )(AsciiArt(standard, 4, "M@NH@TT@N"))
  }

  it must "use other representations" in {
    assertResult(
      " .----------------.  .----------------.  .-----------------. .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .-----------------.\n" +
      "| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\n" +
      "| | ____    ____ | || |      __      | || | ____  _____  | || |  ____  ____  | || |      __      | || |  _________   | || |  _________   | || |      __      | || | ____  _____  | |\n" +
      "| ||_   \\  /   _|| || |     /  \\     | || ||_   \\|_   _| | || | |_   ||   _| | || |     /  \\     | || | |  _   _  |  | || | |  _   _  |  | || |     /  \\     | || ||_   \\|_   _| | |\n" +
      "| |  |   \\/   |  | || |    / /\\ \\    | || |  |   \\ | |   | || |   | |__| |   | || |    / /\\ \\    | || | |_/ | | \\_|  | || | |_/ | | \\_|  | || |    / /\\ \\    | || |  |   \\ | |   | |\n" +
      "| |  | |\\  /| |  | || |   / ____ \\   | || |  | |\\ \\| |   | || |   |  __  |   | || |   / ____ \\   | || |     | |      | || |     | |      | || |   / ____ \\   | || |  | |\\ \\| |   | |\n" +
      "| | _| |_\\/_| |_ | || | _/ /    \\ \\_ | || | _| |_\\   |_  | || |  _| |  | |_  | || | _/ /    \\ \\_ | || |    _| |_     | || |    _| |_     | || | _/ /    \\ \\_ | || | _| |_\\   |_  | |\n" +
      "| ||_____||_____|| || ||____|  |____|| || ||_____|\\____| | || | |____||____| | || ||____|  |____|| || |   |_____|    | || |   |_____|    | || ||____|  |____|| || ||_____|\\____| | |\n" +
      "| |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |\n" +
      "| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\n" +
      " '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' "
    )(AsciiArt(fancy, 20, "MANHATTAN"))
  }

}
